import numpy as np

def tcs_rates_sp(t, y, kf, kr):
	arr = np.zeros((29, 1))
	arr[0, 0] = 500.0*y[3]*y[4]
	arr[1, 0] = 100000000.0*y[0]*y[6]
	arr[2, 0] = 0.01*y[5]*y[8]
	arr[3, 0] = 170000.0*y[10]*y[4]
	arr[4, 0] = 100000000.0*y[12]*y[9]
	arr[5, 0] = 0.01*y[11]*y[8]
	arr[6, 0] = 0.0001*y[14]*y[4]
	arr[7, 0] = 100000000.0*y[12]*y[13]
	arr[8, 0] = 170000.0*y[16]*y[4]
	arr[9, 0] = 100000000.0*y[15]*y[18]
	arr[10, 0] = 0.01*y[17]*y[8]
	arr[11, 0] = 0.0001*y[20]*y[4]
	arr[12, 0] = 100000000.0*y[18]*y[19]
	arr[13, 0] = 170000.0*y[22]*y[4]
	arr[14, 0] = 100000000.0*y[21]*y[24]
	arr[15, 0] = 0.01*y[23]*y[8]
	arr[16, 0] = 0.0001*y[26]*y[4]
	arr[17, 0] = 100000000.0*y[24]*y[25]
	arr[18, 0] = 170000.0*y[28]*y[4]
	arr[19, 0] = 100000000.0*y[27]*y[30]
	arr[20, 0] = 0.01*y[29]*y[8]
	arr[21, 0] = 0.0001*y[32]*y[4]
	arr[22, 0] = 100000000.0*y[30]*y[31]
	arr[23, 0] = 500.0*y[34]*y[4]
	arr[24, 0] = 100000000.0*y[33]*y[36]
	arr[25, 0] = 0.01*y[35]*y[8]
	arr[26, 0] = 500.0*y[38]*y[4]
	arr[27, 0] = 100000000.0*y[37]*y[40]
	arr[28, 0] = 0.01*y[39]*y[8]
	return arr.reshape(-1)

def tcs_rates_jac_sp(t, y, kf, kr):
	arr = np.zeros((29, 41))
	arr[0, 3] = 500.0*y[4]
	arr[0, 4] = 500.0*y[3]
	arr[1, 0] = 100000000.0*y[6]
	arr[1, 6] = 100000000.0*y[0]
	arr[2, 5] = 0.01*y[8]
	arr[2, 8] = 0.01*y[5]
	arr[3, 4] = 170000.0*y[10]
	arr[3, 10] = 170000.0*y[4]
	arr[4, 9] = 100000000.0*y[12]
	arr[4, 12] = 100000000.0*y[9]
	arr[5, 8] = 0.01*y[11]
	arr[5, 11] = 0.01*y[8]
	arr[6, 4] = 0.0001*y[14]
	arr[6, 14] = 0.0001*y[4]
	arr[7, 12] = 100000000.0*y[13]
	arr[7, 13] = 100000000.0*y[12]
	arr[8, 4] = 170000.0*y[16]
	arr[8, 16] = 170000.0*y[4]
	arr[9, 15] = 100000000.0*y[18]
	arr[9, 18] = 100000000.0*y[15]
	arr[10, 8] = 0.01*y[17]
	arr[10, 17] = 0.01*y[8]
	arr[11, 4] = 0.0001*y[20]
	arr[11, 20] = 0.0001*y[4]
	arr[12, 18] = 100000000.0*y[19]
	arr[12, 19] = 100000000.0*y[18]
	arr[13, 4] = 170000.0*y[22]
	arr[13, 22] = 170000.0*y[4]
	arr[14, 21] = 100000000.0*y[24]
	arr[14, 24] = 100000000.0*y[21]
	arr[15, 8] = 0.01*y[23]
	arr[15, 23] = 0.01*y[8]
	arr[16, 4] = 0.0001*y[26]
	arr[16, 26] = 0.0001*y[4]
	arr[17, 24] = 100000000.0*y[25]
	arr[17, 25] = 100000000.0*y[24]
	arr[18, 4] = 170000.0*y[28]
	arr[18, 28] = 170000.0*y[4]
	arr[19, 27] = 100000000.0*y[30]
	arr[19, 30] = 100000000.0*y[27]
	arr[20, 8] = 0.01*y[29]
	arr[20, 29] = 0.01*y[8]
	arr[21, 4] = 0.0001*y[32]
	arr[21, 32] = 0.0001*y[4]
	arr[22, 30] = 100000000.0*y[31]
	arr[22, 31] = 100000000.0*y[30]
	arr[23, 4] = 500.0*y[34]
	arr[23, 34] = 500.0*y[4]
	arr[24, 33] = 100000000.0*y[36]
	arr[24, 36] = 100000000.0*y[33]
	arr[25, 8] = 0.01*y[35]
	arr[25, 35] = 0.01*y[8]
	arr[26, 4] = 500.0*y[38]
	arr[26, 38] = 500.0*y[4]
	arr[27, 37] = 100000000.0*y[40]
	arr[27, 40] = 100000000.0*y[37]
	arr[28, 8] = 0.01*y[39]
	arr[28, 39] = 0.01*y[8]
	return arr.reshape(-1)

def eq_rates_sp(t, y, kf, kr):
	arr = np.zeros((37, 1))
	arr[0, 0] = kf[0]*y[1]*y[2] - kr[0]*y[0]
	arr[1, 0] = kf[1]*y[4]*y[5] - kr[1]*y[3]
	arr[2, 0] = kf[2]*y[7]*y[8] - kr[2]*y[6]
	arr[3, 0] = kf[3]*y[10]*y[11] - kr[3]*y[9]
	arr[4, 0] = kf[4]*y[10]*y[13] - kr[4]*y[12]
	arr[5, 0] = kf[5]*y[15]*y[16] - kr[5]*y[14]
	arr[6, 0] = kf[6]*y[18]*y[19] - kr[6]*y[17]
	arr[7, 0] = kf[7]*y[21]*y[22] - kr[7]*y[20]
	arr[8, 0] = kf[8]*y[24]*y[25] - kr[8]*y[23]
	arr[9, 0] = kf[9]*y[27]*y[28] - kr[9]*y[26]
	arr[10, 0] = kf[10]*y[30]*y[31] - kr[10]*y[29]
	arr[11, 0] = kf[11]*y[33]*y[34] - kr[11]*y[32]
	arr[12, 0] = kf[12]*y[36]*y[37] - kr[12]*y[35]
	arr[13, 0] = kf[13]*y[39]*y[40] - kr[13]*y[38]
	arr[14, 0] = kf[14]*y[22]*y[42] - kr[14]*y[41]
	arr[15, 0] = kf[15]*y[10]*y[44] - kr[15]*y[43]
	arr[16, 0] = kf[16]*y[46]*y[47] - kr[16]*y[45]
	arr[17, 0] = kf[17]*y[49]*y[50] - kr[17]*y[48]
	arr[18, 0] = kf[18]*y[52]*y[53] - kr[18]*y[51]
	arr[19, 0] = kf[19]*y[55]*y[56] - kr[19]*y[54]
	arr[20, 0] = kf[20]*y[22]*y[58] - kr[20]*y[57]
	arr[21, 0] = kf[21]*y[60]*y[61] - kr[21]*y[59]
	arr[22, 0] = kf[22]*y[63]*y[64] - kr[22]*y[62]
	arr[23, 0] = kf[23]*y[66]*y[67] - kr[23]*y[65]
	arr[24, 0] = kf[24]*y[66]*y[69] - kr[24]*y[68]
	arr[25, 0] = kf[25]*y[63]*y[71] - kr[25]*y[70]
	arr[26, 0] = kf[26]*y[40]*y[73] - kr[26]*y[72]
	arr[27, 0] = kf[27]*y[75]*y[76]**2.0 - kr[27]**2.0*y[74]
	arr[28, 0] = kf[28]*y[78]*y[79] - kr[28]*y[77]
	arr[29, 0] = kf[29]*y[81]*y[82]**2.0 - kr[29]**2.0*y[80]
	arr[30, 0] = kf[30]*y[84]*y[85] - kr[30]*y[83]
	arr[31, 0] = kf[31]*y[87]*y[88] - kr[31]*y[86]
	arr[32, 0] = kf[32]*y[90]*y[91] - kr[32]*y[89]
	arr[33, 0] = kf[33]*y[93]*y[94] - kr[33]*y[92]
	arr[34, 0] = kf[34]*y[96]*y[97] - kr[34]*y[95]
	arr[35, 0] = kf[35]*y[100]*y[99] - kr[35]*y[98]
	arr[36, 0] = kf[36]*y[102]*y[103] - kr[36]*y[101]
	return arr.reshape(-1)

def eq_rates_jac_sp(t, y, kf, kr):
	arr = np.zeros((37, 104))
	arr[0, 0] = -kr[0]
	arr[0, 1] = kf[0] * y[2]
	arr[0, 2] = kf[0] * y[1]
	arr[1, 3] = -kr[1]
	arr[1, 4] = kf[1] * y[5]
	arr[1, 5] = kf[1] * y[4]
	arr[2, 6] = -kr[2]
	arr[2, 7] = kf[2] * y[8]
	arr[2, 8] = kf[2] * y[7]
	arr[3, 9] = -kr[3]
	arr[3, 10] = kf[3] * y[11]
	arr[3, 11] = kf[3] * y[10]
	arr[4, 10] = kf[4] * y[13]
	arr[4, 12] = -kr[4]
	arr[4, 13] = kf[4] * y[10]
	arr[5, 14] = -kr[5]
	arr[5, 15] = kf[5] * y[16]
	arr[5, 16] = kf[5] * y[15]
	arr[6, 17] = -kr[6]
	arr[6, 18] = kf[6] * y[19]
	arr[6, 19] = kf[6] * y[18]
	arr[7, 20] = -kr[7]
	arr[7, 21] = kf[7] * y[22]
	arr[7, 22] = kf[7] * y[21]
	arr[8, 23] = -kr[8]
	arr[8, 24] = kf[8] * y[25]
	arr[8, 25] = kf[8] * y[24]
	arr[9, 26] = -kr[9]
	arr[9, 27] = kf[9] * y[28]
	arr[9, 28] = kf[9] * y[27]
	arr[10, 29] = -kr[10]
	arr[10, 30] = kf[10] * y[31]
	arr[10, 31] = kf[10] * y[30]
	arr[11, 32] = -kr[11]
	arr[11, 33] = kf[11] * y[34]
	arr[11, 34] = kf[11] * y[33]
	arr[12, 35] = -kr[12]
	arr[12, 36] = kf[12] * y[37]
	arr[12, 37] = kf[12] * y[36]
	arr[13, 38] = -kr[13]
	arr[13, 39] = kf[13] * y[40]
	arr[13, 40] = kf[13] * y[39]
	arr[14, 22] = kf[14] * y[42]
	arr[14, 41] = -kr[14]
	arr[14, 42] = kf[14] * y[22]
	arr[15, 10] = kf[15] * y[44]
	arr[15, 43] = -kr[15]
	arr[15, 44] = kf[15] * y[10]
	arr[16, 45] = -kr[16]
	arr[16, 46] = kf[16] * y[47]
	arr[16, 47] = kf[16] * y[46]
	arr[17, 48] = -kr[17]
	arr[17, 49] = kf[17] * y[50]
	arr[17, 50] = kf[17] * y[49]
	arr[18, 51] = -kr[18]
	arr[18, 52] = kf[18] * y[53]
	arr[18, 53] = kf[18] * y[52]
	arr[19, 54] = -kr[19]
	arr[19, 55] = kf[19] * y[56]
	arr[19, 56] = kf[19] * y[55]
	arr[20, 22] = kf[20] * y[58]
	arr[20, 57] = -kr[20]
	arr[20, 58] = kf[20] * y[22]
	arr[21, 59] = -kr[21]
	arr[21, 60] = kf[21] * y[61]
	arr[21, 61] = kf[21] * y[60]
	arr[22, 62] = -kr[22]
	arr[22, 63] = kf[22] * y[64]
	arr[22, 64] = kf[22] * y[63]
	arr[23, 65] = -kr[23]
	arr[23, 66] = kf[23] * y[67]
	arr[23, 67] = kf[23] * y[66]
	arr[24, 66] = kf[24] * y[69]
	arr[24, 68] = -kr[24]
	arr[24, 69] = kf[24] * y[66]
	arr[25, 63] = kf[25] * y[71]
	arr[25, 70] = -kr[25]
	arr[25, 71] = kf[25] * y[63]
	arr[26, 40] = kf[26] * y[73]
	arr[26, 72] = -kr[26]
	arr[26, 73] = kf[26] * y[40]
	arr[27, 74] = -kr[27] ** 2.0
	arr[27, 75] = kf[27] * y[76] ** 2.0
	arr[27, 76] = 2.0 * kf[27] * y[75] * y[76] ** 1.0
	arr[28, 77] = -kr[28]
	arr[28, 78] = kf[28] * y[79]
	arr[28, 79] = kf[28] * y[78]
	arr[29, 80] = -kr[29] ** 2.0
	arr[29, 81] = kf[29] * y[82] ** 2.0
	arr[29, 82] = 2.0 * kf[29] * y[81] * y[82] ** 1.0
	arr[30, 83] = -kr[30]
	arr[30, 84] = kf[30] * y[85]
	arr[30, 85] = kf[30] * y[84]
	arr[31, 86] = -kr[31]
	arr[31, 87] = kf[31] * y[88]
	arr[31, 88] = kf[31] * y[87]
	arr[32, 89] = -kr[32]
	arr[32, 90] = kf[32] * y[91]
	arr[32, 91] = kf[32] * y[90]
	arr[33, 92] = -kr[33]
	arr[33, 93] = kf[33] * y[94]
	arr[33, 94] = kf[33] * y[93]
	arr[34, 95] = -kr[34]
	arr[34, 96] = kf[34] * y[97]
	arr[34, 97] = kf[34] * y[96]
	arr[35, 98] = -kr[35]
	arr[35, 99] = kf[35] * y[100]
	arr[35, 100] = kf[35] * y[99]
	arr[36, 101] = -kr[36]
	arr[36, 102] = kf[36] * y[103]
	arr[36, 103] = kf[36] * y[102]
	return arr.reshape(-1)

